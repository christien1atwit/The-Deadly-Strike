:Character:
## This is a skeleton, which is added to all characters automatically. You can use it to define the common parts of your character, for example:
## - System mechanics
## - Movement
## - Attack types
## etc.
:Specs-PhysicsTeching:
# Automatic creation
:Specs-PhysicsSystem:
def PHYSICS_StandardHurtbox_Bottom int() = 0
def PHYSICS_StandardColbox_Bottom int() = 0
def PHYSICS_StandardColbox_Width int() = 4000
def PHYSICS_StandardHurtbox_Use bool() = 1
def PHYSICS_StandardColbox_Use bool() = 1
:Specs-PhysicsMovement:
def MOVE_Dashes_CanRun bool() = 1
def MOVE_Dashes_CanBackdash bool() = 1
def MOVE_Landing_RecoverCrouching bool() = 0
:Specs-Graphics:
# Automatic creation
:Specs-AudioSFX:
# Automatic creation
:Specs-AttacksTypes:
# Automatic creation
:Specs-AttacksThrows:
def ATTACK_Throw_CanAirThrow bool() = 0
def ATTACK_Throw_Air_ThrowBAutoFlip bool() = 0
:Specs-AttacksMechanics:
def ATTACK_CanBlockInAir bool() = 0
:Specs-Anims:
# Automatic creation
:Variables-System:
var current_lane int() = 1
var op_lane int() = 1

var my_id int() = 0
var opponent_id int() = 1

def DEF_SCALE int() = 3000
def BAK_SCALE int() = 2625
def FRN_SCALE int() = 3375
def SCALING_AMOUNT int() = 375

def DEF_ORIGIN_X int() = 75
def DEF_ORIGIN_Y int() = 0
def ORIGIN_AMOUNT=20
var current_scale int() = 3000
:Variables:
## These variables are common to all characters since it's in the skeleton.
##var current_lane int() = 1
:Custom-NeutralStateCommon:
CallParent()
Call(Raise-Lane-Flag)
SpriteOrder(current_lane)
GetCurrentEntityID(my_id)
Vmy_id==0:
	Set(opponent_id, 1)
else
	Set(opponent_id, 0)
endif

TargetEntityByID(opponent_id)
CopyFromTarget(op_lane,current_lane)
Vcurrent_lane==op_lane:
	SetColboxPhantom(0)
else
	SetColboxPhantom(1)
endif
:Raise-Lane-Flag:
##Will set the appropriate lane flag when called




Vcurrent_lane==0:
	Flag(BackLane)
	ModelScale(BAK_SCALE)
endif

Vcurrent_lane==1:
	Flag(MidLane)
	ModelScale(DEF_SCALE)
endif

Vcurrent_lane==2:
	Flag(FrontLane)
	ModelScale(FRN_SCALE)
endif


#LogB(_Flags)
:Shift-In-Stand:
AttackRegister(Light, 5A+B)
Call(Raise-Lane-Flag)
AttackDuration(20)



Vcurrent_lane>0:
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Sub(current_scale, 18)
	ModelScale(current_scale)

	
	
	
	F15:
		Sub(current_lane, 1)
		SetColboxLayer(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif
:Shift-Out-Stand:
AttackRegister(Light, 5C+D)
Call(Raise-Lane-Flag)
AttackDuration(20)



Vcurrent_lane<2:
	Add(current_scale, 18)
	ModelScale(current_scale)
	
	F14:
		Add(current_lane, 1)
		SetColboxLayer(current_lane)
		SpriteOrder(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif

PReaction:
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
endif
:StandardColbox:
CallParent()

SetColboxMode(1)
LO_Shift_M:
	SetColboxLayer(1)

else
	LO_Shift_F:
		SetColboxLayer(2)
	else
		SetColboxLayer(current_lane)
	endif
endif
:State-Template-Attack-Normal-Lane:
# Simple medium attack template for Lane Combat
Call(Raise-Lane-Flag)

AttackRegister(Medium)

# Adjust parameters here
AttackDamage(1000)
AttackDuration(60)
# AttackFlag(Low)

# Put your animation here
#Anim(5B)

# Active frames and hitboxes
F10-12:
	Vcurrent_lane==0:
			HitboxRequires(BackLane)
			Hitbox(1000, 15000, 15000, 25000)
		endif
		Vcurrent_lane==1:
			HitboxRequires(MidLane)
			Hitbox(1000, 15000, 20000, 30000)
		endif
		Vcurrent_lane==2:
			HitboxRequires(FrontLane)
			Hitbox(1500, 16500, 25000, 35000)
		endif
	
endif
:Current-Lane---Subentity:
# Autogenerated
:Current-Lane---Variables:
## Put variables here
:Current-Lane---Action:
## Write your behavior here
CallParent()
