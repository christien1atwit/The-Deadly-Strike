:Character:
## This is a skeleton, which is added to all characters automatically. You can use it to define the common parts of your character, for example:
## - System mechanics
## - Movement
## - Attack types
## etc.
:Specs-UI:
# Automatic creation
:Specs-PhysicsTeching:
def ATTACK_Hitstun_CanRecoverInAir bool() = 0
def ATTACK_Tech_Airborne_CanTechBackward bool() = 0
def ATTACK_Tech_Airborne_CanTechDown bool() = 0
def ATTACK_Tech_Airborne_CanTechForward bool() = 0
def ATTACK_Tech_Airborne_CanTechUp bool() = 0
def ATTACK_Tech_Grounded_CanTechBackward bool() = 0
def ATTACK_Tech_Grounded_CanTechForward bool() = 0
def ATTACK_Tech_Grounded_CanTechUp bool() = 0
def ATTACK_Tech_Grounded_Neutral_MomentumY int() = 0
def ATTACK_Tech_Knockdown_Backward_RecoverCrouching bool() = 0
def ATTACK_Tech_Knockdown_CanTechBackward bool() = 0
def ATTACK_Tech_Knockdown_CanTechForward bool() = 0
def ATTACK_Tech_Knockdown_CanTechUp bool() = 0
def ATTACK_Tech_Knockdown_Forward_RecoverCrouching bool() = 0
def ATTACK_Tech_Knockdown_Neutral_RecoverCrouching bool() = 0
:Specs-PhysicsSystem:
def PHYSICS_StandardHurtbox_Bottom int() = 0
def PHYSICS_StandardColbox_Bottom int() = 0
def PHYSICS_StandardColbox_Width int() = 4000
def PHYSICS_StandardHurtbox_Use bool() = 1
def PHYSICS_StandardColbox_Use bool() = 1
:Specs-PhysicsMovement:
def MOVE_AirActionsMax int() = 1
def MOVE_Backdash_Speed int() = -1900
def MOVE_CrouchToStand_Time int() = 3
def MOVE_Dashes_CanBackdash bool() = 1
def MOVE_Dashes_CanHighjump bool() = 1
def MOVE_Dashes_CanRun bool() = 1
def MOVE_Highjump_HighjumpB_InitialMomentumX int() = -1500
def MOVE_Highjump_HighjumpB_InitialMomentumY int() = 4500
def MOVE_Highjump_HighjumpF_InitialMomentumX int() = 1500
def MOVE_Highjump_HighjumpF_InitialMomentumY int() = 4500
def MOVE_Highjump_HighjumpN_InitialMomentumY int() = 4500
def MOVE_Jump_JumpB_InitialMomentumX int() = -1500
def MOVE_Jump_JumpB_InitialMomentumY int() = 3500
def MOVE_Jump_JumpF_InitialMomentumX int() = 1500
def MOVE_Jump_JumpF_InitialMomentumY int() = 3500
def MOVE_Jump_JumpN_InitialMomentumY int() = 3500
def MOVE_Jump_JumpsquatTime int() = 1
def MOVE_Landing_RecoverCrouching bool() = 0
def MOVE_Landing_TimeAttack int() = 4
def MOVE_Landing_TimeEmpty int() = 2
def MOVE_Run_Speed int() = 2100
def MOVE_Run_SpeedStart int() = 2100
def MOVE_Run_StartTime int() = 5
def MOVE_StandToCrouch_Time int() = 3
def MOVE_TurnaroundStand_Time int() = 0
def MOVE_Walk_SpeedB int() = -1000
def MOVE_Walk_SpeedF int() = 1500
:Specs-Graphics:
# Automatic creation
:Specs-AudioSFX:
def AUDIO_SFX_Heavy_Hit int() = 0
def AUDIO_SFX_Heavy_Hit___Filepath str() = res://castagne/assets/sfx/Heavy_Hit.mp3
def AUDIO_SFX_Heavy_Hit___Volume int() = 1000
def AUDIO_SFX_Light_Hit int() = 0
def AUDIO_SFX_Light_Hit___Filepath str() = res://castagne/assets/sfx/Light_Hit.mp3
def AUDIO_SFX_Light_Hit___Volume int() = 1000
:Specs-AttacksTypes:
def ATTACK_EX_CanCancelIntoSuper bool() = 0
def ATTACK_Heavy_CanCancelIntoHeavies bool() = 0
def ATTACK_Heavy_CanCancelIntoMediums bool() = 0
def ATTACK_Heavy_CanCancelIntoSpecials bool() = 0
def ATTACK_Heavy_CanJumpCancelOnHit bool() = 0
def ATTACK_Light_CanCancelIntoHeavies bool() = 0
def ATTACK_Light_CanCancelIntoLights bool() = 0
def ATTACK_Light_CanCancelIntoMediums bool() = 1
def ATTACK_Light_CanCancelIntoSpecials bool() = 0
def ATTACK_Light_CanJumpCancelOnHit bool() = 0
def ATTACK_Medium_CanCancelIntoHeavies bool() = 0
def ATTACK_Medium_CanCancelIntoMediums bool() = 0
def ATTACK_Medium_CanCancelIntoSpecials bool() = 1
def ATTACK_Medium_CanJumpCancelOnHit bool() = 0
def ATTACK_Special_CanCancelIntoEX bool() = 0
def ATTACK_Special_CanCancelIntoSuper bool() = 0
:Specs-AttacksThrows:
def ATTACK_Throw_CanAirThrow bool() = 0
def ATTACK_Throw_Air_ThrowBAutoFlip bool() = 0
:Specs-AttacksMechanics:
def ATTACK_CanBlockInAir bool() = 0
:Specs-Anims:
def ANIMS_UseStandardAnims bool() = 0
:Variables-System:
var current_lane int() = 1
var op_lane int() = 1

var my_id int() = 0
var opponent_id int() = 1

def DEF_SCALE int() = 4000
def BAK_SCALE int() = 3500
def FRN_SCALE int() = 4500
def SCALING_AMOUNT int() = 500

def DEF_ORIGIN_X int() = 75
def DEF_ORIGIN_Y int() = 0
def ORIGIN_AMOUNT=20
var current_scale int() = 4000
:Variables:
## These variables are common to all characters since it's in the skeleton.
##var current_lane int() = 1
:AnimCrouching:
CallParent()
Anim(Crouch)
:AnimHighjumpB:
CallParent()
Anim(Jump)
:AnimHighjumpF:
CallParent()
Anim(Jump)
:AnimHighjumpN:
CallParent()
Anim(Jump)
:AnimHitstun:
CallParent()
## Helper state to select which hitstun animation to play
_Category(Animations/Reacts/Hitstun)
_Helper()
_Overridable(If you want custom logic for how hitstun's animation works)


#Basic hit sound logic
F1:
	LAF_Light:
		SFXPlay(Light_Hit)
	endif
	LAF_Heavy:
		SFXPlay(Heavy_Hit)
	endif

endif

LPF_Airborne:
	Call(AnimHitstunAirborne)
else
	LCrouching:
		Call(AnimHitstunCrouching)
	else
		Call(AnimHitstunStanding)
	endif
endif
:AnimHitstunCrouching:
CallParent()

Anim(Hitstun_Crouching)
:AnimHitstunStanding:
CallParent()
PFreeze:
		
		AnimFrame(Hitstun_Standing, 0)
		
	endif
:AnimJumpB:
CallParent()
Anim(Jump)
:AnimJumpF:
CallParent()
Anim(Jump)
:AnimJumpN:
CallParent()
Anim(Jump)
:AnimKnockdown:
CallParent()

Anim(Knockdown)
:AnimRun:
CallParent()

Anim(Run)
AnimLoop(16)
:AnimStandToCrouch:
CallParent()
Anim(Crouch)
:Correct-Scale:
Vcurrent_lane==0:
	Set(current_scale, BAK_SCALE)
endif

Vcurrent_lane==1:
	Set(current_scale, DEF_SCALE)
endif

Vcurrent_lane==2:
	Set(current_scale, FRN_SCALE)
endif
:Custom-NeutralStateCommon:
CallParent()
Call(Raise-Lane-Flag)
SpriteOrder(current_lane)
GetCurrentEntityID(my_id)
Vmy_id==0:
	Set(opponent_id, 1)
else
	Set(opponent_id, 0)
endif

TargetEntityByID(opponent_id)
CopyFromTarget(op_lane,current_lane)
Vcurrent_lane==op_lane:
	SetColboxPhantom(0)
else
	SetColboxPhantom(1)
endif
:Custom-OnAttackBlocked:
CallParent()
AddMomentum(-950)
:Custom-OnAttackHit:
CallParent()
AddMomentum(-700)
:Custom-OnBlock:
CallParent()
Log(_Flags)
Move(-100)
:Custom-OnHit:
CallParent()

#Dragging Logic

LAF_DragIn:
	Log("Drag In")
	Sub(current_lane, 1)
	Vcurrent_lane<0:
		Set(current_lane, 0)
	endif
	SetColboxLayer(current_lane)
	SpriteOrder(current_lane)
	Call(Raise-Lane-Flag)
endif

LAF_DragOut:
	Log("Drag Out")
	Add(current_lane, 1)
	Vcurrent_lane>2:
		Set(current_lane, 2)
	endif
	SetColboxLayer(current_lane)
	SpriteOrder(current_lane)
	Call(Raise-Lane-Flag)
endif
:Custom-OnReturnToNeutral:
CallParent()
BreakMomentumX(1000)
Call(Correct-Scale)
:Raise-Lane-Flag:
##Will set the appropriate lane flag when called




Vcurrent_lane==0:
	Flag(BackLane)
	ModelScale(BAK_SCALE)
	#Set(current_scale, BAK_SCALE)
endif

Vcurrent_lane==1:
	Flag(MidLane)
	ModelScale(DEF_SCALE)
	#Set(current_scale, DEF_SCALE)
endif

Vcurrent_lane==2:
	Flag(FrontLane)
	ModelScale(FRN_SCALE)
	#Set(current_scale, FRN_SCALE)
endif


#LogB(_Flags)
:Run:
CallParent()


Unflag(FaceTarget)

AttackAddRegisteredCancels(Light)
AttackCancel(Shift-In-FDash, 6A+B)
AttackCancel(Shift-Out-FDash, 6C+D)
:Shift-In-BDash:
AttackRegister(Light, 4A+B)
Call(Raise-Lane-Flag)
AttackDuration(20)



Vcurrent_lane>0:
	SetColboxPhantom(1)
	

	
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Sub(current_scale, 25)
	ModelScale(current_scale)
	
	
	F1:
		SetMomentum(-3000, 0)
	endif

	F3+:
		AttackCancel(Shift-Out-FDash, 6C+D)
	endif	
	
	
	F15:
		Sub(current_lane, 1)
		SetColboxLayer(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif
:Shift-In-FDash:
AttackRegister(Light, 6A+B)
Call(Raise-Lane-Flag)
AttackDuration(20)

Anim(Run)


Vcurrent_lane>0:
	SetColboxPhantom(1)

	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Sub(current_scale, 25)
	ModelScale(current_scale)
	
	
	F1:
		SetMomentum(3000, 0)
	endif

	F3+:
		AttackCancel(Shift-Out-FDash, 6C+D)
	endif	
	
	
	F15:
		Sub(current_lane, 1)
		SetColboxLayer(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif
:Shift-In-Stand:
AttackRegister(Light, 5A+B)
Call(Raise-Lane-Flag)
AttackDuration(20)



Vcurrent_lane>0:
	SetColboxPhantom(1)
	

	
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Sub(current_scale, 25)
	ModelScale(current_scale)

	
	
	
	F15:
		Sub(current_lane, 1)
		SetColboxLayer(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif
:Shift-Out-BDash:
AttackRegister(Light, 4C+D)
Call(Raise-Lane-Flag)
AttackDuration(20)



Vcurrent_lane<2:
	SetColboxPhantom(1)
	
	
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Add(current_scale, 25)
	ModelScale(current_scale)
	
	
	
	F1:
		SetMomentum(-3000, 0)
	endif

	
	F16+:
		AttackCancel(Shift-In-FDash, 6A+B)
	endif	
	
	F15:
		Add(current_lane, 1)
		SetColboxLayer(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif
:Shift-Out-FDash:
AttackRegister(Light, 6C+D)
Call(Raise-Lane-Flag)
AttackDuration(20)

Anim(Run)

Vcurrent_lane<2:
	SetColboxPhantom(1)
	
	
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Add(current_scale, 25)
	ModelScale(current_scale)
	
	
	
	F1:
		SetMomentum(3000, 0)
	endif

	
	F16+:
		AttackCancel(Shift-In-FDash, 6A+B)
	endif	
	
	F15:
		Add(current_lane, 1)
		SetColboxLayer(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif
:Shift-Out-Stand:
AttackRegister(Light, 5C+D)
Call(Raise-Lane-Flag)
AttackDuration(20)



Vcurrent_lane<2:
	SetColboxPhantom(1)
	
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
	Add(current_scale, 25)
	ModelScale(current_scale)
	
	
	
	F14:
		Add(current_lane, 1)
		SetColboxLayer(current_lane)
		SpriteOrder(current_lane)
		#Log(current_lane)
		Call(Raise-Lane-Flag)
	endif
	
	F20:
		Transition(AnimStand)
	endif
	
endif

PReaction:
	Unflag(PF_Airborne)
	Flag(PF_Grounded)
endif
:StandardColbox:
CallParent()

SetColboxMode(1)
LO_Shift_M:
	SetColboxLayer(1)

else
	LO_Shift_F:
		SetColboxLayer(2)
	else
		SetColboxLayer(current_lane)
	endif
endif
:State-Template-Attack-Normal-Lane:
# Simple medium attack template for Lane Combat
Call(Raise-Lane-Flag)

AttackRegister(Medium)

# Adjust parameters here
AttackDamage(1000)
AttackDuration(60)
# AttackFlag(Low)

# Put your animation here
#Anim(5B)

# Active frames and hitboxes
F10-12:
	Vcurrent_lane==0:
			HitboxRequires(BackLane)
			Hitbox(1000, 15000, 15000, 25000)
		endif
		Vcurrent_lane==1:
			HitboxRequires(MidLane)
			Hitbox(1000, 15000, 20000, 30000)
		endif
		Vcurrent_lane==2:
			HitboxRequires(FrontLane)
			Hitbox(1500, 16500, 25000, 35000)
		endif
	
endif
:Current-Lane---Subentity:
# Autogenerated
:Current-Lane---Variables:
## Put variables here
:Current-Lane---Action:
## Write your behavior here
CallParent()
